

### Login to the build server
```ssh lab-user@<IP_Address>``` Using redhat as your password
### Examine the file Containerfile-old:
```
FROM registry.redhat.io/rhel9/rhel-bootc:9.4-1722356971
RUN dnf -y install http://kickstart.example.com/example.com-root-ca-20240701-1.noarch.rpm
```
#### This Containerfile simply uses an older upstream bootc image (so we can update later) and adds an rpm.  We are using an rpm here that loads the CA for our example.com domain.  In real world use, this might install an rpm that is used to configure a system with the monitoring, hardening, authentication, and other baselines that are required to deploy a system on your network along with any other necessary configuration items

### Build a bootc container using an older image and tag it as registry.example.com:5000/rhel9/rhel-bootc:latest
    podman build -f Containerfile-old --tag registry.example.com:5000/rhel9/rhel-bootc:latest

### Push the bootc container to the registry
    podman push registry.example.com:5000/rhel9/rhel-bootc:latest

### Launch the container to show we can access it as a container
    podman run --rm -d --name bootc registry.example.com:5000/rhel9/rhel-bootc:latest
    podman exec -it bootc /bin/bash
    uname -r
    rpm -qa | grep example
    df -T  ***Note:** no sysroot*
    exit
    podman stop bootc

### Examine the kickstart file we will use to build this server
```
less /usr/share/nginx/html/ks/rhel94_imagemode.cfg
```

### Create a virtual machine with:
```
./pxeboot_system.sh
```
Once the system is built and reboots, disconnect from the virtual console using Ctrl-]

### ssh into your imagemode server using lab-user/redhat
``` ssh imagemode ```

*Investigate the current system*  
```
    uname -r  
    cat /etc/redhat-release  
    rpm -qa | grep example  
    ip a  
    timedatectl  
    df -T *Notice how sysroot now exists*  
    id lab-user  
    sudo ls /etc/sudoers.d  
    sudo ls /root  
    sudo touch /usr/bin/test  
    echo "This file is persistent" > ~/persistent_file  
    cat ~/persistent_file  
    sudo bootc status  
```

### Exit out of the server, build an updated image and push it to the registry
    podman build -f Containerfile-new --tag registry.example.com:5000/rhel9/rhel-bootc:latest

### Push the bootc container to the registry
    podman push registry.example.com:5000/rhel9/rhel-bootc:latest

### ssh back into your server, and do an update
```ssh imagemode```

    sudo bootc update
    sudo reboot

### ssh back into your server, show system again, show update, add to ~/persistent_file, and do a rollback
```ssh imagemode```

    sudo bootc status
    uname -r
    cat /etc/redhat-release
    rpm -qa | grep example
    ip a
    timedatectl
    echo "Even rollback changes are persistent" >> ~/persistent_file
    sudo bootc rollback
    sudo bootc status
    sudo reboot

### ssh back into your server, show the rollback, and show ~/persistent_file
```ssh imagemode```

    sudo bootc status
    uname -r
    cat ~/persistent_file

### Deploy a Java 11 application using the base image previously created
```
cat Containerfile-app-11
podman build -f Containerfile-app-11 --tag registry.example.com:5000/rhel9/rhel-bootc-app:latest
podman push registry.example.com:5000/rhel9/rhel-bootc-app:latest
./pxeboot_system.sh
```
Once the system is built and reboots, disconnect from the virtual console using Ctrl-]

### ssh your application server using lab-user/redhat
``` ssh appserver```

Populate data in the application so we can show persistence:
```
./load_application_data.sh
```

Check the java version:
```
java --version
```

### You should now be able to access your Pet Clinic application using the URL in the file called Application_URL.txt

### Add some information to your Pet Clinic application so we can ensure we have data persistence when we update the system to Java 17

### After you have added some data and verify it was saved, let's update the system to Java 17
```
cat Containerfile-app-17
podman build -f Containerfile-app-17 --tag registry.example.com:5000/rhel9/rhel-bootc-app:latest
podman push registry.example.com:5000/rhel9/rhel-bootc-app:latest
```

### ssh back into your application server and update it.  This time, we will have bootc automatically apply the update and reboot after it loads.
``` ssh appserver```

```
sudo bootc update --apply
```

### Visit your application again and verify the data you entered has persisted through the upgrade

### Add some new data, and lets do a rollback to ensure we still maintain data persistence in a scenario where an issue was discovered with the application that requires a rollback

### After adding additional data and verifiying it was saved, ssh back into your application server, verify the java version and do a rollback with
``` 
ssh appserver
```

### Check the java version:
```
java --version
```

### Now rollback the sysetem and reboot:
```
sudo bootc rollback
reboot
```

### After the rollback, access your application and confirm that all data has persisted

### Now lets upgrade our application server to RHEL 10:
```
cat Containerfile-rhel10-app-21
podman build -f  Containerfile-rhel10-app-21 --tag registry.example.com:5000/rhel10/rhel-bootc-app:latest
podman push registry.example.com:5000/rhel10/rhel-bootc-app:latest
```

### ssh into the appserver and switch the image to your new RHEL 10 image
```
ssh appserver
sudo bootc switch registry.example.com:5000/rhel10/rhel-bootc-app:latest
sudo reboot
```

### Once the server has completed booting, lets verify it is now running RHEL 10:
```
ssh appserver
cat /etc/redhat-release
java --version
```

### Check that your application has persisted all of your data, and add another record.  Once this is done, let's rollback to RHEL 9:
```
ssh appserver
sudo bootc rollback
sudo reboot
```

### Once the appserver has completed booting, verify the records you added to the application exist, then take a look at the system to confirm it has rolled back to RHEL 9:
```
ssh appserver
cat /etc/redhat-release
java --version
```

## This completes our workshop.  Feel free to experiment with the images.  By running pxeboot_system, it will give you the option to delete the existing vm and create a new one from scratch.
