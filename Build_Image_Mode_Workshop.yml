---
- name: Setup a Workshop for RHEL Image Mode
  hosts: localhost
  become: yes
  gather_facts: yes
  connection: local
  
  vars:
    DEBUG: no   # yes/no true/false - Add to task `when: DEBUG == true`
    HOSTNAME: "build"
    DOMAINNAME: "example.com"
    USERNAME: "lab-user"
    USERPASSWORD: "redhat"
    SERVERNAME: "server"
    REGISTRYNAME: "registry"
    REPONAME: "repo"
    KSSERVER: "kickstart"
    REGISTRYDIR: /root/registry
    ISONAME: rhel-9.4-x86_64-dvd.iso # rhel-9.4-x86_64-boot.iso
    WSDIR: /home/{{ USERNAME }}/Workshop
    IMFILES: "{{ WSDIR }}/files"

  tasks:

  - name: Set the hostname
    ansible.builtin.hostname:
      name: "{{ HOSTNAME }}.{{ DOMAINNAME }}"

  - name: Add {{ HOSTNAME }} {{ HOSTNAME }}.{{ DOMAINNAME }} to /etc/hosts
    ansible.builtin.lineinfile:
      path: /etc/hosts
      regexp: '^127\.0\.0\.1'
      line: "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 {{ HOSTNAME }} {{ HOSTNAME }}.{{ DOMAINNAME }}"
      owner: root
      group: root
      mode: 0644

  - name: Add dns entries to /etc/hosts
    ansible.builtin.lineinfile:
      path: /etc/hosts
      line: "{{ item }}"  
    with_items:
      - "192.168.122.101 {{ SERVERNAME }} {{ SERVERNAME }}.{{ DOMAINNAME }}"
      - "192.168.122.1 {{ REGISTRYNAME }} {{ REGISTRYNAME }}.{{ DOMAINNAME }} {{ KSSERVER }} {{ KSSERVER }}.{{ DOMAINNAME }}  {{ REPONAME }} {{ REPONAME }}.{{ DOMAINNAME }}"

  - name: Make sure {{USERNAME}} exists
    ansible.builtin.user:
      name: "{{USERNAME}}"
      groups: wheel

  - name: Set the users password
    ansible.builtin.shell:
      cmd: usermod -p $(openssl passwd -1 {{USERPASSWORD}}) {{USERNAME}}
     
  - name: Install packages
    ansible.builtin.yum:
      name: "{{ rpm_packages }}"
    vars:
      rpm_packages:
      - "@Virtualization Host"
      - virt-manager
      - virt-install
      - cockpit-machines
      - httpd
      - podman
      - haproxy
      - syslinux-tftpboot

  - name: Enable firewall
    ansible.builtin.systemd_service:
      state: started
      enabled: true
      name: firewalld

  - name: Enable libvirtd
    ansible.builtin.systemd_service:
      state: started
      enabled: true
      name: libvirtd

  - name: Allow http in public zone
    ansible.posix.firewalld:
      service: http
      permanent: true
      state: enabled

  - name: Allow http in libvirt zone
    ansible.posix.firewalld:
      service: http
      permanent: true
      state: enabled
      zone: libvirt

  - name: Allow https in libvirt zone
    ansible.posix.firewalld:
      service: https
      permanent: true
      state: enabled
      zone: libvirt

  - name: Allow 8080 for haproxy
    ansible.posix.firewalld:
      port: 8080/tcp
      permanent: true
      state: enabled

  - name: Must restart firewall to load rules
    ansible.builtin.systemd_service:
      state: restarted
      daemon_reload: true
      name: firewalld
  
  - name: Enable Linger
    ansible.builtin.shell:
      cmd: loginctl enable-linger {{USERNAME}}

  - name: Add user to libvirtd
    ansible.builtin.shell:
      cmd: usermod -aG libvirt {{USERNAME}}

  - name: Enable and start libvirt
    ansible.builtin.systemd_service:
      name: libvirtd.service
      enabled: true
      state: started

  - name: add bootp to default libvirt network
    ansible.builtin.command:
      cmd: sed -i "/range.*/a\ \ \ \ \  <bootp file='http://kickstart.example.com/pxe/pxelinux.0'/>" /etc/libvirt/qemu/networks/default.xml

  - name: Enable and start cockpit
    ansible.builtin.systemd_service:
      name: cockpit.socket
      enabled: true
      state: started

  - name: Enable and start dnsmasq
    ansible.builtin.systemd_service:
      name: dnsmasq
      enabled: true
      state: started

  - name: Enable and start httpd
    ansible.builtin.systemd_service:
      name: httpd
      enabled: true
      state: started

  - name: Set necessary permissions for newgidmap
    ansible.builtin.file:
      path: /usr/bin/newgidmap
      mode: '4755'

  - name: Set necessary permissions for newuidmap
    ansible.builtin.file:
      path: /usr/bin/newuidmap
      mode: '4755'

  - name: Create the root CA for example.com
    ansible.builtin.copy:
      src: files/ca.example.com.crt
      dest: /var/www/html/ca.example.com.crt

  - name: Create the data directory for the registry container
    ansible.builtin.file:
      path: "{{ REGISTRYDIR }}/data"
      state: directory

  - name: Create the certs directory for the registry container
    ansible.builtin.file:
      path: "{{ REGISTRYDIR }}/certs"
      state: directory

  - name: Install the registry crt
    ansible.builtin.copy:
      src: files/wildcard.example.com.crt
      dest: "{{ REGISTRYDIR }}/certs/wildcard.example.com.crt"

  - name: Install the registry key
    ansible.builtin.copy:
      src: files/wildcard.example.com.key
      dest: "{{ REGISTRYDIR }}/certs/wildcard.example.com.key"

  - name: Create a container
    containers.podman.podman_container:
      name: registry
      privileged: true
      publish: 443:5000
      volume:
      - "{{ REGISTRYDIR }}/certs:/certs"
      - "{{ REGISTRYDIR }}/data:/var/lib/registry:Z"
      state: started
      image: registry:latest
      env:
        REGISTRY_HTTP_TLS_CERTIFICATE: certs/wildcard.example.com.crt
        REGISTRY_HTTP_TLS_KEY: certs/wildcard.example.com.key

  - name: Install the registry.container service file
    ansible.builtin.copy:
      src: files/registry.container
      dest: /etc/containers/systemd/registry.container

  - name: Copy the example.com CA rpm to the webserver
    ansible.builtin.copy:
      src: files/example.com-root-ca-20240701-1.noarch.rpm
      dest: /var/www/html/example.com-root-ca-20240701-1.noarch.rpm

  - name: Create directories in /var/www/html
    ansible.builtin.file:
      state: directory
      path: "{{ item }}"
    with_items: 
      - /var/www/html/repo
      - /var/www/html/ks
      - /var/www/html/rhel94
      - /var/www/html/pxe/rhel94
      - /var/www/html/pxe/pxelinux.cfg
      - /var/www/html/petclinic

  - name: Mount DVD to /var/www/html/rhel94
    mount:
      path: /var/www/html/rhel94
      src: /mnt/iso/{{ ISONAME }}
      fstype: iso9660
      opts: ro
      state: mounted

  - name: Copy initrd.img to /var/www/html/pxe/rhel94
    ansible.builtin.copy:
      src: /var/www/html/rhel94/isolinux/initrd.img
      dest: /var/www/html/pxe/rhel94/initrd.img
      remote_src: true

  - name: Copy vmlinuz to /var/www/html/pxe/rhel94
    ansible.builtin.copy:
      src: /var/www/html/rhel94/isolinux/vmlinuz
      dest: /var/www/html/pxe/rhel94/vmlinuz
      remote_src: true  

  - name: Copy the pxe files to /var/www/html/pxe
    ansible.builtin.copy:
      src: /tftpboot/
      dest: /var/www/html/pxe/
      remote_src: true

  - name: Copy pxeboot menu to /var/www/html/pxe/pxelinux.cfg/default
    ansible.builtin.copy:
      src: files/default
      dest: /var/www/html/pxe/pxelinux.cfg/default

  - name: Copy rhel94.cfg to /var/www/html/ks
    ansible.builtin.copy:
      src: files/rhel94.cfg
      dest: /var/www/html/ks/rhel94.cfg

  - name: Copy rhel94_imagemode.cfg to /var/www/html/ks
    ansible.builtin.copy:
      src: files/rhel94_imagemode.cfg
      dest: /var/www/html/ks/rhel94_imagemode.cfg

  - name: Copy rhel94_imagemodeapp.cfg to /var/www/html/ks
    ansible.builtin.copy:
      src: files/rhel94_imagemodeapp.cfg
      dest: /var/www/html/ks/rhel94_imagemodeapp.cfg

  - name: Install the example.com CA rpm so we can push to the registry
    ansible.builtin.yum:
      name: /var/www/html/example.com-root-ca-20240701-1.noarch.rpm
      disable_gpg_check: yes

  - name: Create workshop directories
    ansible.builtin.file:
      state: directory
      owner: "{{ USERNAME }}"
      group: users
      path: "{{ item }}"
    with_items: 
      - "{{ WSDIR }}"
      - "{{ IMFILES }}"

  - name: Copy Containerfile-old to the workshop directory
    ansible.builtin.copy:
      src: files/Containerfile-old
      dest: "{{ WSDIR }}/Containerfile-old"
      owner: "{{ USERNAME }}"
      group: users

  - name: Copy Containerfile-new to the workshop directory
    ansible.builtin.copy:
      src: files/Containerfile-new
      dest: "{{ WSDIR }}/Containerfile-new"
      owner: "{{ USERNAME }}"
      group: users

  - name: Copy local.repo
    ansible.builtin.copy:
      src: files/local.repo
      dest: "{{ IMFILES }}/local.repo"
      owner: "{{ USERNAME }}"
      group: users
      
  - name: Copy Containerfile-app-11 to the workshop directory
    ansible.builtin.copy:
      src: files/Containerfile-app-11
      dest: "{{ WSDIR }}/Containerfile-app-11"
      owner: "{{ USERNAME }}"
      group: users
      
  - name: Copy Containerfile-app-17 to the workshop directory
    ansible.builtin.copy:
      src: files/Containerfile-app-17
      dest: "{{ WSDIR }}/Containerfile-app-17"
      owner: "{{ USERNAME }}"
      group: users

  - name: Copy Instructions to the user directory
    ansible.builtin.copy:
      src: files/Instructions
      dest: /home/{{ USERNAME }}/Instructions
      owner: "{{ USERNAME }}"
      group: users

  - name: Add local.repo to /var/www/html/repo
    ansible.builtin.copy:
      src: files/local.repo
      dest: /var/www/html/repo/local.repo

  - name: Login to registry.redhat.io
    containers.podman.podman_login:
      username: "{{ PMUSERNAME }}"
      password: "{{ PMPASSWORD }}"
      registry: registry.redhat.io
    become: no

  - name: Pull images
    containers.podman.podman_image:
      name: "{{ item }}"
    with_items:
      - registry.redhat.io/rhel9/rhel-bootc:9.4-1722356971
      - registry.redhat.io/rhel9/rhel-bootc:latest
    become: no

  - name: Logout of registry.redhat.io
    containers.podman.podman_logout:
      registry: registry.redhat.io
    become: no

  - name: Stop default libvirt network
    ansible.builtin.command:
      cmd: virsh net-destroy default

  - name: Start default libvirt network
    ansible.builtin.command:
      cmd: virsh net-start default

  - name: Write out URL where you can access the application
    ansible.builtin.lineinfile:
      create: true
      path: "{{ WSDIR }}/Application_URL.txt"
      line: http://{{ ansible_default_ipv4.address }}:8080
      owner: "{{ USERNAME }}"
      group: users
      
  - name: Write out URL where you can access Cockpit
    ansible.builtin.lineinfile:
      create: true
      path: "{{ WSDIR }}/Cockpit_URL.txt"
      line: https://{{ ansible_default_ipv4.address }}:9090
      owner: "{{ USERNAME }}"
      group: users

  - name: Add pxeboot_system.sh to workshop dir
    ansible.builtin.copy:
      src: files/pxeboot_system.sh
      dest: "{{ WSDIR }}/pxeboot_system.sh"
      mode: '0755'
      owner: "{{ USERNAME }}"
      group: users

  - name: Copy haproxy config across
    ansible.builtin.copy:
      src: files/haproxy.cfg
      dest: /etc/haproxy/haproxy.cfg
      backup: no

  - name: Copy petclinic.service
    ansible.builtin.copy:
      src: files/petclinic.service
      dest: "{{ IMFILES }}/petclinic.service"
      owner: "{{ USERNAME }}"
      group: users

  - name: Copy petclinic.sql
    ansible.builtin.copy:
      src: files/petclinic.sql
      dest: /var/www/html/petclinic/petclinic.sql

  - name: Copy application_install.sh
    ansible.builtin.copy:
      src: files/application_install.sh
      dest: /var/www/html/petclinic/application_install.sh
      
  - name: Start haproxy
    ansible.builtin.systemd_service:
      state: started
      enabled: true
      name: haproxy 
      
  ##### TO DO #####
  # Get the ISO without needing a token
  # Expand the workshop with an application
