

### Login to the build server
```ssh lab-user@<IP_Address>``` Using redhat as your password
### Examine the file Containerfile-old:
```
FROM registry.redhat.io/rhel9/rhel-bootc:9.4-1722356971
RUN dnf -y install http://kickstart.example.com/example.com-root-ca-20240701-1.noarch.rpm
```
#### This Containerfile simply uses an older upstream bootc image (so we can update later) and adds an rpm.  We are using an rpm here that loads the CA for our example.com domain.  In real world use, this might install an rpm that is used to configure a system with the monitoring, hardening, authentication, and other baselines that are required to deploy a system on your network along with any other necessary configuration items

### Build a bootc container using an older image and tag it as registry.example.com/rhel9/rhel-bootc:latest
    podman build -f Containerfile-old --tag registry.example.com/rhel9/rhel-bootc:latest

### Push the bootc container to the registry
    podman push registry.example.com/rhel9/rhel-bootc:latest

### Launch the container to show we can access it as a container
    podman run --rm -d --name bootc registry.example.com/rhel9/rhel-bootc:latest
    podman exec -it bootc /bin/bash
    uname -r
    rpm -qa | grep example
    df -T  ***Note:** no sysroot*
    exit
    podman stop bootc


### Create a virtual machine with:
```
./pxeboot_system.sh imagemode
```
Once the system is built and reboots, note the IP address and disconnect from the virtual console using Ctrl-]

### ssh from build.example.com to the VM using lab-user/redhat
*Investigate the current system*  
```
    uname -r  
    cat /etc/redhat-release  
    rpm -qa | grep example  
    ip -f inet addr show ens192  
    timedatectl  
    df -T / /sysroot *Notice how sysroot now exists*  
    id lab-user  
    sudo ls /etc/sudoers.d  
    sudo ls /root  
    sudo touch /usr/bin/test  
    echo "This file is persistent" > ~/persistent_file  
    cat ~/persistent_file  
    sudo bootc status  
```

### Exit out of the vm, build an updated image and push it to the registry
    podman build -f Containerfile-new --tag registry.example.com/rhel9/rhel-bootc:latest

### Push the bootc container to the registry
    podman push registry.example.com/rhel9/rhel-bootc:latest

### ssh back into the VM, and do an update
    sudo bootc update
    sudo reboot

### ssh back into the VM, show system again, show update, add to ~/persistent_file, and do a rollback
    sudo bootc status
    uname -r
    cat /etc/redhat-release
    rpm -qa | grep example
    ip -f inet addr show ens192
    timedatectl
    df -T / /sysroot # Notice how sysroot now exists
    id lab-user
    sudo ls /etc/sudoers.d
    sudo ls /root
    sudo touch /usr/bin/test
    cat ~/persistent_file
    echo "Even rollback changes are persistent" >> ~/persistent_file
    sudo bootc rollback
    sudo bootc status
    sudo reboot

### ssh back into the VM, show the rollback, and show ~/persistent_file
    sudo bootc status
    uname -r
    cat ~/persistent_file

### Deploy a Java 11 application using the base image previously created
```
podman build -f Containerfile-app-11 --tag registry.example.com/rhel9/rhel-bootc-app:latest
podman push registry.example.com/rhel9/rhel-bootc-app:latest
./pxeboot_system.sh app
```
Once the system is built and reboots, note the IP address and disconnect from the virtual console using Ctrl-]

### ssh from build.example.com to the application VM using lab-user/redhat
Populate data in the application so we can show persistence:
```
./application_install.sh
```

### You should now be able to access your Pet Clinic application using the URL in the file called Application_URL.txt
***NOTE: This does not yet work unless you update the IP address on the last line of /etc/haproxy/haproxy.cfg to the IP address of the VM that was created and do a systemctl restart haproxy***

### Add some information to your Pet Clinic application so we can ensure we have data persistence when we update the system to Java 17

### After you have added some data and verify it was saved, let's update the system to Java 17
```
podman build -f Containerfile-app-17 --tag registry.example.com/rhel9/rhel-bootc-app:latest
podman push registry.example.com/rhel9/rhel-bootc-app:latest
```

### ssh to your application server and update it
```
sudo bootc update
sudo reboot
```
***NOTE: You will need to ssh into the system and run ```sudo systemctl restart petclinic``` at the moment

### Visit your application again and verify the data you entered has persisted through the upgrade

### Add some new data, and lets do a rollback to ensure we still maintain data persistence in a scenario where an issue was discovered with the application that requires a rollback

### After adding additional data and verifiying it was saved, ssh back into your application server and do a rollback with
```
sudo bootc rollback
reboot
```

### After the rollback, access your application and confirm that all data has persisted

TODO:
  Convert a package mode installation to image mode